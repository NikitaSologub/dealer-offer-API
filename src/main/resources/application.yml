server:
  port: 15073
  servlet.context-path: /dealer-offer-API

minio:
  url: ${MINIO_ROOT_URL:https://localhost:9000/}
  bucket: ${MINIO_BUCKET:retrobucket} # svc-yc-car-search
  access-key: ${MINIO_ROOT_USER:YCAJEpPp9OIYu7W8v8kkCwlci}
  secret-key: ${MINIO_ROOT_PASSWORD:YCM655s5lED4alDInim6hBpcbmBqOPO7xk-JLVh2}
#  https://storage.yandexcloud.net/svc-yc-car-search/<key>?<parameters> - вариант 1
#  https://svc-yc-car-search.storage.yandexcloud.net/<key>?<parameters> - вариант 2
spring:
  cloud:
    stream:
      rabbit:
        bindings:
          dealer-car-stock:
            consumer:
              exchangeType: direct
#              autoBindDlq: true # Открывать ли очередь недоставленных сообщений
              queueNameGroupOnly: true # Использовать для названия очереди только её имя без exchange
              bindingRoutingKey: "#" # Какие из RoutingKey (через запятую) использовать для связывания
              bindingRoutingKeyDelimiter: "," # Разделить варианты использования bindingRoutingKey
            producer:
              exchangeType: direct
#              routingKeyExpression: "'presale.sms.event.create'"
      bindings:
        dealer-car-stock:
          destination: dealer-car-stock-exchange
          group: dealer-car-stock-queue
          binder: rabbit
      binders:
        rabbit:
          type: rabbit
          environment:
            spring:
              rabbitmq:
                virtual-host: ${RABBIT_VHOST:/}
                port: ${RABBIT_PORT:5672}
                username: ${RABBIT_USERNAME:guest}
                password: ${RABBIT_PASSWORD:guest}
                host: ${RABBIT_HOST:localhost}
#                deliveryMode: ${DELIVERY_MODE:2}
#  rabbitmq:
#    host: ${RABBIT_HOST:localhost}

#logging:
#  level:
#    ru:
#      alfaleasing: ${LOGGING_LEVEL:INFO}
#      alfaleasing.logging:
#        http: ${LOGGING_LEVEL:INFO}